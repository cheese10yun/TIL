# 만들면서 배우는 헥사고날 아키텍처 설계와 구현

# 01 왜 헥사고날 아키텍처인가?

> 필리포 부루넬리스키가 자신의 아이디어가 올바르다는 것을증명하기 위해서 스스로 건물에 벽동을 쌓았던 피렌체 대성당의 예와 같이, 소프트웨어 아키텍트는 자신의 아키텍처가 훌륭하다는 것을 증명하기 위해 손을 더렵혀야 한다.

* 엔티티
* 값 객체
* 애플리케이션 헥사곤
* 프레임워크 헥사곤
* 드라이빙 오퍼레이선
* 드리븐 오퍼레이션
* 유스케이스
* 입력포트
* 출력포트


엔티티 (Entity):

애플리케이션의 핵심 비즈니스 로직을 담는 객체입니다. 보통 데이터베이스의 테이블과 매핑되며, 식별자를 가지고 있어 동일성을 유지합니다.
값 객체 (Value Object):

엔티티와 달리 식별자를 가지지 않는 객체로, 데이터의 속성을 나타냅니다. 값 객체는 불변성을 가지며, 엔티티의 속성으로 사용됩니다.
애플리케이션 헥사곤 (Application Hexagon):

헥사고날 아키텍처의 중심부로, 애플리케이션의 핵심 비즈니스 로직을 담고 있습니다. 이 영역은 외부의 변경으로부터 보호되며, 포트를 통해 외부와 통신합니다.
프레임워크 헥사곤 (Framework Hexagon):

헥사고날 아키텍처의 외부 부분으로, 애플리케이션과 외부 시스템(데이터베이스, 웹 서버 등) 사이의 상호작용을 처리합니다.
드라이빙 오퍼레이션 (Driving Operation):

애플리케이션의 핵심 로직을 "호출"하는 외부 요청입니다. 예를 들어, 사용자의 API 요청이나 이벤트가 이에 해당합니다.
드리븐 오퍼레이션 (Driven Operation):

애플리케이션에서 외부 시스템(데이터베이스, 메시징 시스템 등)으로의 "응답" 또는 "요청"입니다.
유스케이스 (Use Case):

애플리케이션에서 수행되는 특정 비즈니스 로직의 흐름입니다. 유스케이스는 사용자 또는 외부 시스템의 요구를 충족시키기 위해 정의됩니다.
입력포트 (Input Port):

드라이빙 오퍼레이션을 애플리케이션 헥사곤으로 전달하는 인터페이스입니다. 이를 통해 외부 요청이 애플리케이션의 핵심 로직으로 전달됩니다.
출력포트 (Output Port):

드리븐 오퍼레이션을 처리하기 위한 인터페이스입니다. 애플리케이션의 핵심 로직이 외부 시스템과 상호작용할 때 사용됩니다.


# 02 도메인 헥사곤으로 비즈니스 규칙 감싸기

* 엔티티는 인프라스트럭처에 해당하는가 ?
* 빈약한 모델